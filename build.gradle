plugins {
    id "java"
    id "checkstyle"
    id "maven-publish"
    id "jacoco"
    id "org.sonarqube" version "3.3"
    id "io.freefair.lombok" version "6.4.1"
    id "org.springframework.boot" version "2.6.3"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "org.flywaydb.flyway" version "8.5.4"
    id "org.barfuin.gradle.jacocolog" version "2.0.0" // Prints test coverage to console
}

group = "demo.springboot"
description = "spring-boot-demo"
version = "0.0.1-SNAPSHOT"
java.sourceCompatibility = JavaVersion.VERSION_17
java.targetCompatibility = java.sourceCompatibility

// Repositories to obtain dependencies
repositories {
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

// Artefact to publish (i.e. fat jar produced by Spring Boot)
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact bootJar
        }
    }
}

springBoot {
    buildInfo()
}

ext {
    dependencyVersion = [
            flyway: "8.5.4",
            lombok: "1.18.22",
            springCloud: "3.1.1",
            springDoc: "1.6.6",
            checkstyle: "10.1",
            restAssured: "4.5.1",
            junit: "5.8.2",
            h2: "2.1.210",
            hamcrest: "2.2",
            mockitoInline: "4.4.0",
            postgresqlDriver: "42.3.3",
            modelMapper: "3.1.0"
    ]
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.cloud:spring-cloud-starter-sleuth:${dependencyVersion.springCloud}"
    implementation "org.flywaydb:flyway-core:${dependencyVersion.flyway}"
    implementation "org.springdoc:springdoc-openapi-ui:${dependencyVersion.springDoc}"
    implementation "org.postgresql:postgresql:${dependencyVersion.postgresqlDriver}"
    implementation "org.modelmapper:modelmapper:${dependencyVersion.modelMapper}"

    // Auto restart application during development
    developmentOnly "org.springframework.boot:spring-boot-devtools"

    // Generates configuration metadata to allow IDEs to provide auto-completion.
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    // Generate index of components to load in order to speed up startup performance
    annotationProcessor "org.springframework:spring-context-indexer"

    compileOnly "org.projectlombok:lombok:${dependencyVersion.lombok}"
    compileOnly "com.puppycrawl.tools:checkstyle:${dependencyVersion.checkstyle}"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "io.rest-assured:rest-assured:${dependencyVersion.restAssured}"
    testImplementation "org.junit.jupiter:junit-jupiter:${dependencyVersion.junit}"
    testImplementation "com.h2database:h2:${dependencyVersion.h2}"
    testImplementation "org.hamcrest:hamcrest:${dependencyVersion.hamcrest}"
    testImplementation "org.mockito:mockito-inline:${dependencyVersion.mockitoInline}"
}

jar {
    enabled = false
}

checkstyle {
    checkstyleMain.enabled = false
    checkstyleTest.enabled = false
    showViolations = true
    ignoreFailures = false
}

tasks.withType(Checkstyle) {
    reports {
        xml.required = false
        html.required = true
        html.destination rootProject.file("$buildDir/reports/checkstyle/checkstyle-result.html")
    }
}

// Minimum test coverage thresholds
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {counter = "LINE"; minimum = 0.5 }
            limit {counter = "BRANCH"; minimum = 0.5 }
            limit {counter = "COMPLEXITY"; minimum = 0.5 }
            limit {counter = "INSTRUCTION"; minimum = 0.5 }
            limit {counter = "METHOD"; minimum = 0.5 }
            limit {counter = "CLASS"; minimum = 0.5 }
        }
    }
}

// Specify jacoco exclusions
def jacocoExclusions = ["**/Application*", "**/*Config*"]
jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, excludes: jacocoExclusions)
        }))
    }
}
jacocoTestCoverageVerification {
    inputs.files compileJava, bootBuildInfo, processResources
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, excludes: jacocoExclusions)
        }))
    }
}

def jacocoExecPath = "$rootDir/target/jacoco.exec"
test {
    useJUnitPlatform()
    jacoco {
        destinationFile = layout.buildDirectory.file(jacocoExecPath).get().asFile
    }

    testLogging {
        events "PASSED", "SKIPPED", "FAILED"
//        showStackTrace true
        showExceptions true
        showCauses true
        exceptionFormat "full"
    }

    // Prints any test outcomes to the console
//    testLogging {
//        events "passed", "skipped", "failed"
//        showStackTrace true
//        showExceptions true
//        showCauses true
//        exceptionFormat "full"
//    }
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.jacoco.reportPath", jacocoExecPath
    }
}

// Tasks dependencies
test.finalizedBy jacocoTestReport, jacocoTestCoverageVerification // Generate report and check coverage after test run.
check.dependsOn jacocoTestCoverageVerification // Check includes coverage verification
jacocoTestReport.dependsOn test // Test report includes running test.